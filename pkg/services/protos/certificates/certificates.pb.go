// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/services/protos/certificates/certificates.proto

/*
	Package certificates is a generated protocol buffer package.

	It is generated from these files:
		pkg/services/protos/certificates/certificates.proto

	It has these top-level messages:
		Subject
		Certificate
*/
package certificates

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Subject is the identity information for the certificate
type Subject struct {
	CommonName   string   `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Email        string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Organization []string `protobuf:"bytes,3,rep,name=organization" json:"organization,omitempty"`
	Country      []string `protobuf:"bytes,4,rep,name=country" json:"country,omitempty"`
	Province     []string `protobuf:"bytes,5,rep,name=province" json:"province,omitempty"`
	Locality     []string `protobuf:"bytes,6,rep,name=locality" json:"locality,omitempty"`
	SerialNumer  []byte   `protobuf:"bytes,7,opt,name=serial_numer,json=serialNumer,proto3" json:"serial_numer,omitempty"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptorCertificates, []int{0} }

func (m *Subject) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *Subject) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Subject) GetOrganization() []string {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *Subject) GetCountry() []string {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Subject) GetProvince() []string {
	if m != nil {
		return m.Province
	}
	return nil
}

func (m *Subject) GetLocality() []string {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *Subject) GetSerialNumer() []byte {
	if m != nil {
		return m.SerialNumer
	}
	return nil
}

// Certificate represents some PKI certificate
type Certificate struct {
	Subject      *Subject `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Certificate  []byte   `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	SerialNumber []byte   `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptorCertificates, []int{1} }

func (m *Certificate) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *Certificate) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *Certificate) GetSerialNumber() []byte {
	if m != nil {
		return m.SerialNumber
	}
	return nil
}

func init() {
	proto.RegisterType((*Subject)(nil), "certificates.Subject")
	proto.RegisterType((*Certificate)(nil), "certificates.Certificate")
}
func (m *Subject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommonName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCertificates(dAtA, i, uint64(len(m.CommonName)))
		i += copy(dAtA[i:], m.CommonName)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCertificates(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Organization) > 0 {
		for _, s := range m.Organization {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Country) > 0 {
		for _, s := range m.Country {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Province) > 0 {
		for _, s := range m.Province {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Locality) > 0 {
		for _, s := range m.Locality {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SerialNumer) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCertificates(dAtA, i, uint64(len(m.SerialNumer)))
		i += copy(dAtA[i:], m.SerialNumer)
	}
	return i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Subject != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCertificates(dAtA, i, uint64(m.Subject.Size()))
		n1, err := m.Subject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Certificate) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCertificates(dAtA, i, uint64(len(m.Certificate)))
		i += copy(dAtA[i:], m.Certificate)
	}
	if len(m.SerialNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCertificates(dAtA, i, uint64(len(m.SerialNumber)))
		i += copy(dAtA[i:], m.SerialNumber)
	}
	return i, nil
}

func encodeFixed64Certificates(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Certificates(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCertificates(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Subject) Size() (n int) {
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovCertificates(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCertificates(uint64(l))
	}
	if len(m.Organization) > 0 {
		for _, s := range m.Organization {
			l = len(s)
			n += 1 + l + sovCertificates(uint64(l))
		}
	}
	if len(m.Country) > 0 {
		for _, s := range m.Country {
			l = len(s)
			n += 1 + l + sovCertificates(uint64(l))
		}
	}
	if len(m.Province) > 0 {
		for _, s := range m.Province {
			l = len(s)
			n += 1 + l + sovCertificates(uint64(l))
		}
	}
	if len(m.Locality) > 0 {
		for _, s := range m.Locality {
			l = len(s)
			n += 1 + l + sovCertificates(uint64(l))
		}
	}
	l = len(m.SerialNumer)
	if l > 0 {
		n += 1 + l + sovCertificates(uint64(l))
	}
	return n
}

func (m *Certificate) Size() (n int) {
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovCertificates(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovCertificates(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovCertificates(uint64(l))
	}
	return n
}

func sovCertificates(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCertificates(x uint64) (n int) {
	return sovCertificates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = append(m.Organization, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = append(m.Country, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = append(m.Province, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locality = append(m.Locality, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumer = append(m.SerialNumer[:0], dAtA[iNdEx:postIndex]...)
			if m.SerialNumer == nil {
				m.SerialNumer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate[:0], dAtA[iNdEx:postIndex]...)
			if m.Certificate == nil {
				m.Certificate = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertificates
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = append(m.SerialNumber[:0], dAtA[iNdEx:postIndex]...)
			if m.SerialNumber == nil {
				m.SerialNumber = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertificates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertificates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCertificates
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCertificates
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCertificates(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCertificates = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertificates   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("pkg/services/protos/certificates/certificates.proto", fileDescriptorCertificates)
}

var fileDescriptorCertificates = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0x7f, 0xff, 0xa5, 0x0d, 0xbd, 0x31, 0x12, 0xb2, 0x40, 0xb2, 0x18, 0x42, 0x28, 0x4b,
	0xa7, 0x46, 0xa2, 0x6f, 0x00, 0x7b, 0x87, 0xf0, 0x00, 0x95, 0x63, 0x5d, 0x2a, 0x43, 0x6c, 0x57,
	0x8e, 0x5b, 0xa9, 0xec, 0xbc, 0x03, 0x8f, 0xc4, 0xc8, 0xca, 0x86, 0xc2, 0x8b, 0xa0, 0x3a, 0xa4,
	0x4d, 0xc6, 0xf3, 0x7d, 0x67, 0xf0, 0xb9, 0x86, 0xf9, 0xfa, 0x65, 0x95, 0x55, 0xe8, 0xb6, 0x4a,
	0x62, 0x95, 0xad, 0x9d, 0xf5, 0xb6, 0xca, 0x24, 0x3a, 0xaf, 0x9e, 0x94, 0x14, 0x1e, 0xfb, 0x61,
	0x16, 0x0a, 0x8c, 0x76, 0xd9, 0xe4, 0x8b, 0x40, 0xf4, 0xb8, 0x29, 0x9e, 0x51, 0x7a, 0x76, 0x0d,
	0xb1, 0xb4, 0x5a, 0x5b, 0xb3, 0x34, 0x42, 0x23, 0x27, 0x29, 0x99, 0x8e, 0x73, 0x68, 0xd0, 0x42,
	0x68, 0x64, 0x17, 0x30, 0x44, 0x2d, 0x54, 0xc9, 0xff, 0x07, 0xd5, 0x04, 0x36, 0x01, 0x6a, 0xdd,
	0x4a, 0x18, 0xf5, 0x2a, 0xbc, 0xb2, 0x86, 0x0f, 0xd2, 0xc1, 0x74, 0x9c, 0xf7, 0x18, 0xe3, 0x10,
	0x49, 0xbb, 0x31, 0xde, 0xed, 0xf8, 0x49, 0xd0, 0x6d, 0x64, 0x57, 0x70, 0xba, 0x76, 0x76, 0xab,
	0x8c, 0x44, 0x3e, 0x0c, 0xea, 0x90, 0xf7, 0xae, 0xb4, 0x52, 0x94, 0xca, 0xef, 0xf8, 0xa8, 0x71,
	0x6d, 0x66, 0x37, 0x40, 0x2b, 0x74, 0x4a, 0x94, 0x4b, 0xb3, 0xd1, 0xe8, 0x78, 0x94, 0x92, 0x29,
	0xcd, 0xe3, 0x86, 0x2d, 0xf6, 0x68, 0xf2, 0x46, 0x20, 0x7e, 0x38, 0x8e, 0x65, 0x19, 0x44, 0x55,
	0x33, 0x35, 0x6c, 0x8b, 0xef, 0x2e, 0x67, 0xbd, 0xfb, 0xfc, 0xdd, 0x21, 0x6f, 0x5b, 0x2c, 0x85,
	0xb8, 0x53, 0x08, 0xab, 0x69, 0xde, 0x45, 0xec, 0x16, 0xce, 0x8e, 0xaf, 0x28, 0xd0, 0xf1, 0x41,
	0xe8, 0xd0, 0xc3, 0x33, 0x0a, 0x74, 0xf7, 0xe7, 0x1f, 0x75, 0x42, 0x3e, 0xeb, 0x84, 0x7c, 0xd7,
	0x09, 0x79, 0xff, 0x49, 0xfe, 0x15, 0xa3, 0xf0, 0x15, 0xf3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x81, 0xf9, 0x52, 0xf9, 0xc1, 0x01, 0x00, 0x00,
}
